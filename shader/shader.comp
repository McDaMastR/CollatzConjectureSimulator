/* 
 * Copyright (C) 2024-2025 Seth McDonald
 * 
 * This file is part of Collatz Conjecture Simulator.
 * 
 * Collatz Conjecture Simulator is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 * 
 * Collatz Conjecture Simulator is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with Collatz Conjecture
 * Simulator. If not, see <https://www.gnu.org/licenses/>.
 */

#version 460 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_control_flow_attributes2 : enable
#extension GL_EXT_shader_explicit_arithmetic_types : require


#if GL_EXT_control_flow_attributes
	#define ATTR_UNROLL [[unroll]]
#else
	#define ATTR_UNROLL
#endif

#if GL_EXT_control_flow_attributes2 && SPV_VER >= 14
	#define ATTR_MIN(min)         [[min_iterations(min)]]
	#define ATTR_MAX(max)         [[max_iterations(max)]]
	#define ATTR_MINMAX(min, max) [[min_iterations(min), max_iterations(max)]]
#else
	#define ATTR_MIN(min)
	#define ATTR_MAX(max)
	#define ATTR_MINMAX(min, max)
#endif

#if INT16
	#define COUNT_TYPE  uint16_t
	#define TO_COUNT(x) uint16_t(x)
#else
	#define COUNT_TYPE  lowp uint
	#define TO_COUNT(x) uint(x)
#endif

#if ITER_SIZE == 128
	#if INT64
		#define VALUE_TYPE u64vec2
		#define VALUE_1    u64vec2(1, 0)
	#else
		#define VALUE_TYPE uvec4
		#define VALUE_1    uvec4(1, 0, 0, 0)
	#endif
#elif ITER_SIZE == 256
	#if INT64
		#define VALUE_TYPE u64vec4
		#define VALUE_1    u64vec4(1, 0, 0, 0)
	#else
		#define VALUE_TYPE uvec4[2]
		#define VALUE_1    uvec4[2](uvec4(1, 0, 0, 0), uvec4(0))
	#endif
#endif


layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;
uint index = gl_GlobalInvocationID.x;

layout(set = 0, binding = 0, std430) restrict readonly buffer InBuffer32
{
	uvec4 startingValues[];
} inBuffer32;

layout(set = 0, binding = 0, std430) restrict readonly buffer InBuffer64
{
	u64vec2 startingValues[];
} inBuffer64;

layout(set = 0, binding = 1, std430) restrict writeonly buffer OutBuffer16
{
	uint16_t stepCounts[];
} outBuffer16;

layout(set = 0, binding = 1, std430) restrict writeonly buffer OutBuffer32
{
	uint stepCounts[];
} outBuffer32;


// Return whether n is even
bool iseven(in uint n)
{
	return (n & 1) == 0;
}

bool iseven(in uvec4 n)
{
	return (n.x & 1) == 0;
}

bool iseven(in u64vec2 n)
{
	return (n.x & 1) == 0;
}

bool iseven(in uvec4[2] n)
{
	return (n[0].x & 1) == 0;
}

bool iseven(in u64vec4 n)
{
	return (n.x & 1) == 0;
}


// Read starting value from in-buffer
void readin(out uvec4 n, out COUNT_TYPE count)
{
	n = inBuffer32.startingValues[index];
	count = TO_COUNT(0);
}

void readin(out u64vec2 n, out COUNT_TYPE count)
{
	n = inBuffer64.startingValues[index];
	count = TO_COUNT(0);
}

void readin(out uvec4[2] n, out COUNT_TYPE count)
{
	n[0] = inBuffer32.startingValues[index];
	n[1] = uvec4(0);
	count = TO_COUNT(0);
}

void readin(out u64vec4 n, out COUNT_TYPE count)
{
	n.xy = inBuffer64.startingValues[index];
	n.zw = u64vec2(0);
	count = TO_COUNT(0);
}


// Write step count to out-buffer
void writeout_16(in COUNT_TYPE count)
{
	outBuffer16.stepCounts[index] = uint16_t(count);
}

void writeout_32(in COUNT_TYPE count)
{
	uint outindex = index / 2;
	bool even = iseven(index);

	atomicAnd(outBuffer32.stepCounts[outindex], even ? 0xFFFF0000U : 0x0000FFFFU);
	atomicOr(outBuffer32.stepCounts[outindex], uint(count) << (even ? 0U : 16U));
}

#if STO16
	#define writeout(count) writeout_16(count)
#else
	#define writeout(count) writeout_32(count)
#endif


// 3n + 1
void up_le(inout uvec4 n, inout COUNT_TYPE count)
{
	uvec4 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 31U;

	_2n_1 = left | uvec4(1, right.xyz);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = 0; i < n.length() - 1; i++) {
		lowp uint carry = uint(_2n_1[i] > n[i]);
		n[i + 1] += carry;
	}
}

void up_be(inout uvec4 n, inout COUNT_TYPE count)
{
	uvec4 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 31U;

	_2n_1 = left | uvec4(right.yzw, 1);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = n.length() - 1; i > 0; i--) {
		lowp uint carry = uint(_2n_1[i] > n[i]);
		n[i - 1] += carry;
	}
}

void up_le(inout u64vec2 n, inout COUNT_TYPE count)
{
	u64vec2 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 63U;

	_2n_1 = left | u64vec2(1, right.x);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = 0; i < n.length() - 1; i++) {
		uint64_t carry = uint64_t(_2n_1[i] > n[i]);
		n[i + 1] += carry;
	}
}

void up_be(inout u64vec2 n, inout COUNT_TYPE count)
{
	u64vec2 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 63U;

	_2n_1 = left | u64vec2(right.y, 1);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = n.length() - 1; i > 0; i--) {
		uint64_t carry = uint64_t(_2n_1[i] > n[i]);
		n[i - 1] += carry;
	}
}

void up_le(inout uvec4[2] n, inout COUNT_TYPE count)
{
	uvec4[2] left, right, _2n_1;

	count += TO_COUNT(1);

	left[0]  = n[0] << 1U;
	left[1]  = n[1] << 1U;
	right[0] = n[0] >> 31U;
	right[1] = n[1] >> 31U;

	_2n_1[0] = left[0] | uvec4(1,          right[0].xyz);
	_2n_1[1] = left[1] | uvec4(right[0].w, right[1].xyz);

	n[0] += _2n_1[0];
	n[1] += _2n_1[1];

	ATTR_UNROLL
	for (uint i = 0; i < n.length() * n[0].length() - 1; i++) {
		lowp uint carry = uint(_2n_1[i / 4][i % 4] > n[i / 4][i % 4]);
		n[(i + 1) / 4][(i + 1) % 4] += carry;
	}
}

void up_be(inout uvec4[2] n, inout COUNT_TYPE count)
{
	uvec4[2] left, right, _2n_1;

	count += TO_COUNT(1);

	left[0]  = n[0] << 1U;
	left[1]  = n[1] << 1U;
	right[0] = n[0] >> 31U;
	right[1] = n[1] >> 31U;

	_2n_1[0] = left[0] | uvec4(right[0].yzw, right[1].x);
	_2n_1[1] = left[1] | uvec4(right[1].yzw, 1);

	n[0] += _2n_1[0];
	n[1] += _2n_1[1];

	ATTR_UNROLL
	for (uint i = n.length() * n[0].length() - 1; i > 0; i--) {
		lowp uint carry = uint(_2n_1[i / 4][i % 4] > n[i / 4][i % 4]);
		n[(i - 1) / 4][(i - 1) % 4] += carry;
	}
}

void up_le(inout u64vec4 n, inout COUNT_TYPE count)
{
	u64vec4 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 63U;

	_2n_1 = left | u64vec4(1, right.xyz);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = 0; i < n.length() - 1; i++) {
		uint64_t carry = uint64_t(_2n_1[i] > n[i]);
		n[i + 1] += carry;
	}
}

void up_be(inout u64vec4 n, inout COUNT_TYPE count)
{
	u64vec4 left, right, _2n_1;

	count += TO_COUNT(1);

	left  = n << 1U;
	right = n >> 63U;

	_2n_1 = left | u64vec4(right.yzw, 1);

	n += _2n_1;

	ATTR_UNROLL
	for (uint i = n.length() - 1; i > 0; i--) {
		uint64_t carry = uint64_t(_2n_1[i] > n[i]);
		n[i - 1] += carry;
	}
}

#if LITTLE_ENDIAN
	#define up(n, count) up_le(n, count)
#else
	#define up(n, count) up_be(n, count)
#endif


// n/2 for each factor of 2 (up to 31 factors of 2)
void down_le(inout uvec4 n, inout COUNT_TYPE count)
{
	uvec4 left, right;

	uint x = n.x;
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (32 - factors);

	n = right | uvec4(left.yzw, 0);
}

void down_be(inout uvec4 n, inout COUNT_TYPE count)
{
	uvec4 left, right;

	uint x = n.x;
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (32 - factors);

	n = right | uvec4(0, left.xyz);
}

void down_le(inout u64vec2 n, inout COUNT_TYPE count)
{
	u64vec2 left, right;

	// findLSB (GLSL) => FindILsb (SPIR-V)
	// SPIR-V Extended Instructions for GLSL (version 1.00, revision 16):
	// "[FindILsb] is currently limited to 32-bit width components."
	uint x = uint(n.x);
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (64 - factors);

	n = right | u64vec2(left.y, 0);
}

void down_be(inout u64vec2 n, inout COUNT_TYPE count)
{
	u64vec2 left, right;

	uint x = uint(n.x);
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (64 - factors);

	n = right | u64vec2(0, left.x);
}

void down_le(inout uvec4[2] n, inout COUNT_TYPE count)
{
	uvec4[2] left, right;

	uint x = n[0].x;
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right[0] = n[0] >> factors;
	right[1] = n[1] >> factors;
	left[0]  = n[0] << (32 - factors);
	left[1]  = n[1] << (32 - factors);

	n[0] = right[0] | uvec4(left[0].yzw, left[1].x);
	n[1] = right[1] | uvec4(left[1].yzw, 0);
}

void down_be(inout uvec4[2] n, inout COUNT_TYPE count)
{
	uvec4[2] left, right;

	uint x = n[0].x;
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right[0] = n[0] >> factors;
	right[1] = n[1] >> factors;
	left[0]  = n[0] << (32 - factors);
	left[1]  = n[1] << (32 - factors);

	n[0] = right[0] | uvec4(0,         left[0].xyz);
	n[1] = right[1] | uvec4(left[0].w, left[1].xyz);
}

void down_le(inout u64vec4 n, inout COUNT_TYPE count)
{
	u64vec4 left, right;

	uint x = uint(n.x);
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (64 - factors);

	n = right | u64vec4(left.yzw, 0);
}

void down_be(inout u64vec4 n, inout COUNT_TYPE count)
{
	u64vec4 left, right;

	uint x = uint(n.x);
	lowp uint factors = findLSB(x) & 31U;

	count += TO_COUNT(factors);

	right = n >> factors;
	left  = n << (64 - factors);

	n = right | u64vec4(0, left.xyz);
}

#if LITTLE_ENDIAN
	#define down(n, count) down_le(n, count)
#else
	#define down(n, count) down_be(n, count)
#endif


// Entry point
void main(void)
{
	VALUE_TYPE n;
	COUNT_TYPE count;
	readin(n, count);

	ATTR_MIN(2)
	do {
		up(n, count);

		ATTR_MINMAX(1, n.length())
		do {
			down(n, count);
		}
		while (iseven(n));
	}
	while (n != VALUE_1);

	writeout(count);
}
