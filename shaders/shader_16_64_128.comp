/* 
 * Copyright (C) 2024  Seth McDonald <seth.i.mcdonald@gmail.com>
 * 
 * This file is part of Collatz Conjecture Simulator.
 * 
 * Collatz Conjecture Simulator is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 * 
 * Collatz Conjecture Simulator is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with Collatz Conjecture
 * Simulator. If not, see <https://www.gnu.org/licenses/>.
 */

#version 460 core
#extension GL_EXT_control_flow_attributes : require
#extension GL_EXT_control_flow_attributes2 : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#if SPV_VER >= 14
	#define ATTR_MIN_ITER(I) [[min_iterations(I)]]
	#define ATTR_MAX_ITER(I) [[max_iterations(I)]]
	#define ATTR_MIN_MAX_ITER(Imin, Imax) [[min_iterations(Imin), max_iterations(Imax)]]
#else
	#define ATTR_MIN_ITER(I)
	#define ATTR_MAX_ITER(I)
	#define ATTR_MIN_MAX_ITER(Imin, Imax)
#endif

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer InBuffer
{
	u64vec2 startingValues[];
} inBuffer;

layout(set = 0, binding = 1, std430) restrict writeonly buffer OutBuffer
{
	uint16_t stepCounts[];
} outBuffer;

void main(void)
{
	uint index = gl_GlobalInvocationID.x;

	u64vec2 n = inBuffer.startingValues[index];
	uint16_t steps = 0S;

	// Loop until n == 1
	ATTR_MIN_ITER(1)
	do {
		// 3n + 1
		steps += 1S;

		u64vec2 left  = n << 1U;
		u64vec2 right = n >> 63U;
		u64vec2 _2n_1 = left | u64vec2(1, right.x);

		n += _2n_1;

		[[unroll]]
		for (uint i = 0; i < n.length() - 1; i++) {
			n[i + 1] += uint64_t(_2n_1[i] > n[i]);
		}

		// n/2 for each factor of 2
		ATTR_MIN_MAX_ITER(1, 4)
		do {
			uint x = uint(n.x);
			lowp uint factors = findLSB(x) & 31U;
			steps += uint16_t(factors);

			right = n >> factors;
			left  = n << (64 - factors);

			n = right | u64vec2(left.y, 0);
		}
		while ((n.x & 1) == 0);
	}
	while (n != u64vec2(1, 0));

	outBuffer.stepCounts[index] = steps;
}
